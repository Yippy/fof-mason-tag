{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@xsoft/mason-tag/webpack/bootstrap","webpack://@xsoft/mason-tag/webpack/runtime/compat get default export","webpack://@xsoft/mason-tag/webpack/runtime/define property getters","webpack://@xsoft/mason-tag/webpack/runtime/hasOwnProperty shorthand","webpack://@xsoft/mason-tag/webpack/runtime/make namespace object","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['forum/app']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/Model']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@xsoft/mason-tag/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@xsoft/mason-tag/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@xsoft/mason-tag/./src/common/models/Answer.ts","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@xsoft/mason-tag/./src/common/models/Field.ts","webpack://@xsoft/mason-tag/./src/common/models/ByTag.ts","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/extend']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionComposer']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['components/Composer']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/Component']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@xsoft/mason-tag/./src/common/helpers/sortByAttribute.ts","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditDropdown.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditText.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditTags.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldGrid.js","webpack://@xsoft/mason-tag/./src/forum/helpers/chunkArray.ts","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditor.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditorByTags.js","webpack://@xsoft/mason-tag/./src/forum/components/ByTagsComposer.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['tags/components/TagDiscussionModal']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/Button']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditorModal.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionHero']\"","webpack://@xsoft/mason-tag/./src/forum/components/FieldsViewer.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/CommentPost']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionPage']\"","webpack://@xsoft/mason-tag/./src/forum/addFieldsOnDiscussionPost.js","webpack://@xsoft/mason-tag/./src/forum/index.js","webpack://@xsoft/mason-tag/./src/forum/addComposerFields.js","webpack://@xsoft/mason-tag/./src/forum/addFieldsOnDiscussionHero.js","webpack://@xsoft/mason-tag/./src/forum/addFieldUpdateControl.js","webpack://@xsoft/mason-tag/./src/forum/patchModelIdentifier.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Model from 'flarum/common/Model';\r\nimport Field from './Field';\r\n\r\nexport default class Answer extends Model {\r\n    content = Model.attribute<string>('content');\r\n    is_suggested = Model.attribute<boolean>('is_suggested');\r\n    sort = Model.attribute<number | null>('sort');\r\n    field = Model.hasOne<Field>('field');\r\n\r\n    apiEndpoint() {\r\n        return '/xsoft/mason-tag/answers' + (this.exists ? '/' + this.data.id : '');\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/computed'];","import Model from 'flarum/common/Model';\r\nimport computed from 'flarum/common/utils/computed';\r\nimport Answer from './Answer';\r\n\r\nexport default class Field extends Model {\r\n    name = Model.attribute<string>('name');\r\n    description = Model.attribute<string | null>('description');\r\n    min_answers_count = Model.attribute<number>('min_answers_count');\r\n    max_answers_count = Model.attribute<number>('max_answers_count');\r\n    show_when_empty = Model.attribute<boolean>('show_when_empty');\r\n    user_values_allowed = Model.attribute<boolean>('user_values_allowed');\r\n    validation = Model.attribute<string | null>('validation');\r\n    icon = Model.attribute<string | null>('icon');\r\n    sort = Model.attribute<number | null>('sort');\r\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\r\n    allAnswers = Model.hasMany<Answer>('allAnswers');\r\n    suggestedAnswers = Model.hasMany<Answer>('suggestedAnswers');\r\n    required = computed<boolean>('min_answers_count', (min_answers_count) => min_answers_count > 0);\r\n    multiple = computed<boolean>('max_answers_count', (max_answers_count) => max_answers_count > 1);\r\n\r\n    apiEndpoint() {\r\n        return '/xsoft/mason-tag/fields' + (this.exists ? '/' + this.data.id : '');\r\n    }\r\n}\r\n","import Model from 'flarum/common/Model';\r\n\r\nexport default class ByTag extends Model {\r\n    tag_name = Model.attribute('tag_name');\r\n    tag_id = Model.attribute('tag_id');\r\n    field_name = Model.attribute('field_name');\r\n    switch = Model.attribute('switch');\r\n\r\n    apiEndpoint() {\r\n        return '/xsoft/mason-tag/bytags' + (this.exists ? '/' + this.data.id : '');\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Composer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","export default function sortByAttribute<T extends { [k in K]: () => any }, K extends string | number | symbol>(items: T[], attr: K) {\r\n    if (!attr) attr = 'sort';\r\n    return items.sort((a, b) => a[attr]() - b[attr]());\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Model from 'flarum/common/Model';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport Component from 'flarum/common/Component';\r\nimport sortByAttribute from '@common/helpers/sortByAttribute';\r\n\r\nexport default class FieldEditDropdown extends Component {\r\n    view(vnode) {\r\n        // To be certain to not work on object copies, we always read the current one from vnode.attrs\r\n        const { field, answers, onchange } = vnode.attrs;\r\n\r\n        let selectedAnswerIdsForThisField = [];\r\n\r\n        (field.suggestedAnswers() || []).forEach((answer) => {\r\n            const answerIndex = answers.findIndex((a) => {\r\n                // Temporary store entries seem to turn into undefined after saving\r\n                if (typeof a === 'undefined') {\r\n                    return false;\r\n                }\r\n\r\n                return a.id() === answer.id();\r\n            });\r\n\r\n            if (answerIndex !== -1) {\r\n                selectedAnswerIdsForThisField.push(answer.id());\r\n            }\r\n        });\r\n\r\n        let relationshipInfo = {\r\n            field: {\r\n                data: Model.getIdentifier(this.field),\r\n            },\r\n        };\r\n\r\n        return (\r\n            <span className=\"Select\">\r\n                <select\r\n                    className=\"Select-input FormControl\"\r\n                    multiple={field.multiple()}\r\n                    onchange={(event) => {\r\n                        let answers = [];\r\n\r\n                        for (let option of event.target.options) {\r\n                            if (option.selected && option.value !== 'none') {\r\n                                const answerId = option.value;\r\n\r\n                                // This will only work with suggested answers for now\r\n                                // As they are the only ones registered in the store\r\n                                // answers.push(app.store.getById('mason-answers', answerId));\r\n\r\n                                // need to add field relationship in order to avoid JS error on\r\n                                // the text entry side\r\n                                let storeObj = app.store.getById('mason-answers', answerId);\r\n                                storeObj.data.relationships = relationshipInfo;\r\n                                answers.push(storeObj);\r\n                            }\r\n                        }\r\n\r\n                        onchange(answers);\r\n                    }}\r\n                >\r\n                    {!field.multiple() && (\r\n                        <option\r\n                            value=\"none\"\r\n                            selected={selectedAnswerIdsForThisField.length === 0}\r\n                            disabled={field.required()}\r\n                            hidden={this.placeholderHidden(field)}\r\n                        >\r\n                            {this.selectPlaceholder(field)}\r\n                        </option>\r\n                    )}\r\n                    {sortByAttribute(field.suggestedAnswers() || []).map((answer) => (\r\n                        <option value={answer.id()} selected={selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1}>\r\n                            {answer.content()}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n                {icon('fas fa-caret-down', { className: 'Select-caret' })}\r\n            </span>\r\n        );\r\n    }\r\n\r\n    placeholderHidden(field) {\r\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\r\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\r\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\r\n            return false;\r\n        }\r\n\r\n        return field.required();\r\n    }\r\n\r\n    selectPlaceholder(field) {\r\n        let text = '';\r\n\r\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\r\n            text += field.name();\r\n\r\n            if (field.required()) {\r\n                text += ' *';\r\n            }\r\n\r\n            text += ' - ';\r\n        }\r\n\r\n        if (field.required()) {\r\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.choose-option');\r\n        } else {\r\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.no-option-selected');\r\n        }\r\n\r\n        return text;\r\n    }\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Model from 'flarum/common/Model';\r\nimport Component from 'flarum/common/Component';\r\n\r\nexport default class FieldEditText extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.field = this.attrs.field;\r\n        this.answers = this.attrs.answers;\r\n        this.onchange = this.attrs.onchange;\r\n        this.inputId = 'FormControl mason-input-' + this.attrs.inputId;\r\n\r\n        this.content = '';\r\n        var answersForThisField = [];\r\n\r\n        if (typeof this.answers === 'undefined') {\r\n            answersForThisField = false;\r\n        } else {\r\n            answersForThisField = this.answers.filter((answer) => {\r\n                // Temporary store entries seem to turn into undefined after saving\r\n                if (typeof answer === 'undefined') {\r\n                    return false;\r\n                }\r\n\r\n                return answer.field().id() === this.field.id();\r\n            });\r\n        }\r\n\r\n        if (answersForThisField.length) {\r\n            // For now we only support a single custom answer\r\n            this.content = answersForThisField[0].content();\r\n        }\r\n    }\r\n\r\n    view() {\r\n        return (\r\n            <input\r\n                className=\"FormControl\"\r\n                required={this.field.required()}\r\n                value={this.content}\r\n                class={this.inputId}\r\n                oninput={(e) => {\r\n                    this.content = e.target.value;\r\n\r\n                    if (this.content === '') {\r\n                        this.onchange([]);\r\n                    } else {\r\n                        const answer = app.store.createRecord('mason-answers', {\r\n                            attributes: {\r\n                                content: this.content,\r\n                            },\r\n                            relationships: {\r\n                                field: {\r\n                                    data: Model.getIdentifier(this.field),\r\n                                },\r\n                            },\r\n                        });\r\n\r\n                        this.onchange([answer]);\r\n                    }\r\n                }}\r\n                placeholder={this.fieldPlaceholder()}\r\n            />\r\n        );\r\n    }\r\n\r\n    fieldPlaceholder() {\r\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\r\n            return this.field.name() + (this.field.required() ? ' *' : '');\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/utils/sortTags'];","import app from 'flarum/forum/app';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport Component from 'flarum/common/Component';\r\nimport sortTags from 'flarum/tags/utils/sortTags';\r\nimport classList from 'flarum/common/utils/classList';\r\n\r\nexport default class DiscussionFields extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.tags = app.store.all('tags');\r\n        this.selectedTags = [];\r\n\r\n        if (this.attrs.discussion) {\r\n            this.tags = this.tags.filter((tag) => tag.canAddToDiscussion() || this.attrs.discussion.tags().indexOf(tag) !== -1);\r\n\r\n            this.selectedTags = this.attrs.discussion.tags();\r\n        } else {\r\n            this.tags = this.tags.filter((tag) => tag.canStartDiscussion());\r\n        }\r\n\r\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\r\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\r\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\r\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\r\n\r\n        // If primary tags are disabled, don't offer them\r\n        if (this.maxPrimary <= 0) {\r\n            this.tags = this.tags.filter((tag) => !tag.isPrimary());\r\n        }\r\n\r\n        // If secondary tags are disabled, don't offer them\r\n        if (this.maxSecondary <= 0) {\r\n            this.tags = this.tags.filter((tag) => tag.isPrimary());\r\n        }\r\n\r\n        this.tags = sortTags(this.tags);\r\n\r\n        this.inputUuid = Math.random().toString(36).substring(2);\r\n    }\r\n\r\n    view() {\r\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\r\n            return <div className=\"Alert\">{app.translator.trans('xsoft-mason-tag.forum.tags.inadequate-settings')}</div>;\r\n        }\r\n\r\n        // We take the first child selected or if none, the first parent selected\r\n        // Of course this only works if a single tag or tag+parent is selected\r\n        // Multiple tags are not supported on this selector\r\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort((tag) => (tag.parent() ? -1 : 1))[0].id() : null;\r\n        const inputUuid = this.inputUuid;\r\n        const required = this.fieldRequired();\r\n\r\n        return (\r\n            <div\r\n                className={classList('Mason-Field Form-group', {\r\n                    ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\r\n                })}\r\n            >\r\n                <label for={`fofMasonTag-selectInput-${inputUuid}`}>{this.fieldLabel()}</label>\r\n                <span className=\"Select\">\r\n                    <select\r\n                        className=\"Select-input FormControl\"\r\n                        id={`fofMasonTag-selectInput-${inputUuid}`}\r\n                        onchange={(event) => {\r\n                            const id = event.target.value;\r\n\r\n                            this.selectedTags = [];\r\n\r\n                            if (id !== 'none') {\r\n                                this.selectedTags.push(this.tags.find((tag) => tag.id() === id));\r\n\r\n                                const parent = this.selectedTags[0].parent();\r\n                                if (parent) {\r\n                                    this.selectedTags.push(parent);\r\n                                }\r\n                            }\r\n\r\n                            this.attrs.onchange(this.selectedTags);\r\n                        }}\r\n                    >\r\n                        <option value=\"none\" selected={this.selectedTags.length === 0} disabled={required} hidden={this.placeholderHidden()}>\r\n                            {this.selectPlaceholder()}\r\n                        </option>\r\n                        {this.tags.map((tag) => {\r\n                            const parent = tag.parent();\r\n\r\n                            return (\r\n                                <option value={tag.id()} selected={tag.id() === currentSelectedChild}>\r\n                                    {(parent ? parent.name() + ' | ' : '') + tag.name()}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                        ,\r\n                    </select>\r\n                    {icon('fas fa-caret-down', { className: 'Select-caret' })}\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    fieldRequired() {\r\n        return this.minPrimary > 0 || this.minSecondary > 0;\r\n    }\r\n\r\n    fieldLabel() {\r\n        let text = app.forum.attribute('xsoft-mason-tag.tags-field-name') || app.translator.trans('xsoft-mason-tag.forum.tags.tags-label');\r\n\r\n        if (this.fieldRequired()) {\r\n            text += ' *';\r\n        }\r\n\r\n        return text;\r\n    }\r\n\r\n    placeholderHidden() {\r\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\r\n            return false;\r\n        }\r\n\r\n        return this.fieldRequired();\r\n    }\r\n\r\n    selectPlaceholder() {\r\n        let text = '';\r\n\r\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\r\n            text += this.fieldLabel() + ' - ';\r\n        }\r\n\r\n        if (this.fieldRequired()) {\r\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.choose-option');\r\n        } else {\r\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.no-option-selected');\r\n        }\r\n\r\n        return text;\r\n    }\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport chunkArray from '../helpers/chunkArray';\r\n\r\nexport default class FieldGrid extends Component {\r\n    view() {\r\n        return (\r\n            <div className=\"Mason-Grid-Wrapper\">\r\n                <div className=\"Mason-Grid\">\r\n                    {chunkArray(this.attrs.items, app.forum.attribute('xsoft-mason-tag.column-count')).map((row) => (\r\n                        <div className=\"Mason-Row Form-group\">\r\n                            {row.map((item) => (item))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Split an array into multiple arrays of a given size.\r\n *\r\n * Useful for grid layouts.\r\n *\r\n * @see https://stackoverflow.com/a/64777515/11091039\r\n * @param arr Array of items\r\n * @param size Number of items per array\r\n */\r\nexport default function chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return Array(Math.ceil(arr.length / size))\r\n        .fill(undefined)\r\n        .map((_, i) => arr.slice(size * i, size + size * i));\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\nimport Component from 'flarum/common/Component';\r\nimport classList from 'flarum/common/utils/classList';\r\n\r\nimport sortByAttribute from '@common/helpers/sortByAttribute';\r\nimport FieldEditDropdown from './FieldEditDropdown';\r\nimport FieldEditText from './FieldEditText';\r\nimport FieldEditTags from './FieldEditTags';\r\nimport FieldGrid from './FieldGrid';\r\n\r\nexport default class FieldsEditor extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\r\n\r\n        // Index to quickly do a reverse lookup from answer to field\r\n        this.answerToFieldIndex = [];\r\n        this.fields.forEach((field) => {\r\n            const answers = field.suggestedAnswers();\r\n\r\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\r\n            // where we log a warning if the relationship appears to be missing\r\n            // This should help troubleshooting what happens if no answers are offered\r\n            if (!Array.isArray(answers)) {\r\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\r\n\r\n                return;\r\n            }\r\n\r\n            answers.forEach((answer) => {\r\n                this.answerToFieldIndex[answer.id()] = field.id();\r\n            });\r\n        });\r\n    }\r\n\r\n    view() {\r\n        return (\r\n            <div className=\"Mason-Fields Mason-Fields--editor\">\r\n                {this.headItems().toArray()}\r\n                <FieldGrid items={this.fieldItems().toArray()} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateSelection(field, fieldAnswers) {\r\n        // Keep only answers to other fields\r\n        let answers = this.attrs.answers.filter((answer) => {\r\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\r\n\r\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\r\n            // In that case the field should be linked in the relationship\r\n            if (typeof reverseFieldLookup === 'undefined') {\r\n                return answer.field().id() !== field.id();\r\n            }\r\n\r\n            return reverseFieldLookup !== field.id();\r\n        });\r\n\r\n        answers = answers.concat(fieldAnswers);\r\n\r\n        this.attrs.onchange(answers);\r\n    }\r\n\r\n    headItems() {\r\n        const items = new ItemList();\r\n\r\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\r\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    fieldItems() {\r\n        const items = new ItemList();\r\n\r\n        if (app.forum.attribute('xsoft-mason-tag.tags-as-fields')) {\r\n            items.add(\r\n                'tags',\r\n                <FieldEditTags\r\n                    discussion={this.attrs.discussion}\r\n                    onchange={(tags) => {\r\n                        this.attrs.ontagchange && this.attrs.ontagchange(tags);\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        this.fields.forEach((field) => {\r\n            const inputAttrs = {\r\n                field,\r\n                answers: this.attrs.answers,\r\n                onchange: (fieldAnswers) => {\r\n                    // Every input component calls \"onchange\" with a list of answers from the store\r\n                    this.updateSelection(field, fieldAnswers);\r\n                },\r\n            };\r\n            let input = null;\r\n\r\n            if (field.user_values_allowed()) {\r\n                input = <FieldEditText {...inputAttrs} />;\r\n            } else {\r\n                input = <FieldEditDropdown {...inputAttrs} />;\r\n            }\r\n\r\n            items.add(\r\n                `field-${field.id()}`,\r\n                <div\r\n                    class={classList('Mason-Field Form-group', {\r\n                        ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\r\n                    })}\r\n                >\r\n                    <label>\r\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\r\n                        {field.name()}\r\n                        {field.required() ? ' *' : null}\r\n                    </label>\r\n                    {input}\r\n                    {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return items;\r\n    }\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\nimport Component from 'flarum/common/Component';\r\nimport classList from 'flarum/common/utils/classList';\r\n\r\nimport sortByAttribute from '@common/helpers/sortByAttribute';\r\nimport FieldEditDropdown from './FieldEditDropdown';\r\nimport FieldEditText from './FieldEditText';\r\nimport FieldEditTags from './FieldEditTags';\r\nimport FieldGrid from './FieldGrid';\r\n\r\nexport default class FieldsEditorByTags extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\r\n\r\n        // Index to quickly do a reverse lookup from answer to field\r\n        this.answerToFieldIndex = [];\r\n        this.fields.forEach((field) => {\r\n            const answers = field.suggestedAnswers();\r\n\r\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\r\n            // where we log a warning if the relationship appears to be missing\r\n            // This should help troubleshooting what happens if no answers are offered\r\n            if (!Array.isArray(answers)) {\r\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\r\n\r\n                return;\r\n            }\r\n\r\n            answers.forEach((answer) => {\r\n                this.answerToFieldIndex[answer.id()] = field.id();\r\n            });\r\n        });\r\n    }\r\n\r\n    view() {\r\n        return (\r\n            <div className=\"Mason-Fields Mason-Fields--editor\">\r\n                {this.headItems().toArray()}\r\n                <FieldGrid items={this.fieldItems().toArray()} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateSelection(field, fieldAnswers) {\r\n        // Keep only answers to other fields\r\n        let answers = this.attrs.answers.filter((answer) => {\r\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\r\n\r\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\r\n            // In that case the field should be linked in the relationship\r\n            if (typeof reverseFieldLookup === 'undefined') {\r\n                return answer.field().id() !== field.id();\r\n            }\r\n\r\n            return reverseFieldLookup !== field.id();\r\n        });\r\n\r\n        answers = answers.concat(fieldAnswers);\r\n\r\n        this.attrs.onchange(answers);\r\n    }\r\n\r\n    headItems() {\r\n        const items = new ItemList();\r\n\r\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\r\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\r\n        }\r\n        return items;\r\n    }\r\n\r\n    fieldItems() {\r\n        const items = new ItemList();\r\n\r\n        // taking this feature off beacuse changing tags will affect which fields show up\r\n\r\n        // if (app.forum.attribute('xsoft-mason-tag.tags-as-fields')) {\r\n        //     items.add(\r\n        //         'tags',\r\n        //         <FieldEditTags\r\n        //             discussion={this.attrs.discussion}\r\n        //             onchange={(tags) => {\r\n        //                 this.attrs.ontagchange && this.attrs.ontagchange(tags);\r\n        //             }}\r\n        //         />\r\n        //     );\r\n        // }\r\n\r\n        this.fields.forEach((field) => {\r\n            const inputAttrs = {\r\n                field,\r\n                bytags: this.attrs.bytags,\r\n                inputId: field.data.id,\r\n                answers: this.attrs.answers,\r\n                onchange: (fieldAnswers) => {\r\n                    // Every input component calls \"onchange\" with a list of answers from the store\r\n                    this.updateSelection(field, fieldAnswers);\r\n                },\r\n            };\r\n            let input = null;\r\n\r\n            if (field.user_values_allowed()) {\r\n                input = <FieldEditText {...inputAttrs} />;\r\n            } else {\r\n                input = <FieldEditDropdown {...inputAttrs} />;\r\n            }\r\n\r\n            this.attrs.bytags.forEach((tag) => {\r\n                // filter the items list for fields we actually need\r\n                if (tag == field.data.attributes.name) {\r\n                    items.add(\r\n                        `field-${field.id()}`,\r\n                        <div\r\n                            class={classList('Mason-Field Form-group', {\r\n                                ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\r\n                            })}\r\n                        >\r\n                            <label>\r\n                                {field.icon() ? <>{icon(field.icon())} </> : null}\r\n                                {field.name()}\r\n                                {field.required() ? ' *' : null}\r\n                            </label>\r\n                            {input}\r\n                            {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n        });\r\n\r\n        return items;\r\n    }\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\n\r\nexport default class ByTagsComposer extends Component {\r\n    matchTags() {\r\n        // build an array of Tags with the fields that match them\r\n\r\n        const tags = app.store.all('tags');\r\n        let tagsList = [];\r\n\r\n        let tempStorage = app.store.all('mason-bytags');\r\n        var usedList = [];\r\n\r\n        for (let i = 0; i < tags.length; i++) {\r\n            let fields = [];\r\n            let fieldIDs = [];\r\n            var tagName = tags[i].data.attributes.name;\r\n            let tagsObj = {};\r\n\r\n            usedList = tempStorage.filter((match) => match.data.attributes.tag_name == tagName && match.data.attributes.switch == true);\r\n\r\n            // It may be better to create an object with all the Tags represented\r\n            // even if they have no fields enabled. Turn this conditional back off if so.\r\n            if (usedList[0]) {\r\n                usedList.forEach(function (e) {\r\n                    fields.push(e.data.attributes.field_name);\r\n                    fieldIDs.push(e.data.id);\r\n                });\r\n\r\n                tagsObj = { tagName, fields, fieldIDs };\r\n                tagsList.push(tagsObj);\r\n            }\r\n        }\r\n\r\n        return tagsList;\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/components/TagDiscussionModal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","import app from 'flarum/forum/app';\r\nimport Modal from 'flarum/common/components/Modal';\r\nimport Button from 'flarum/common/components/Button';\r\nimport FieldsEditor from './FieldsEditor';\r\nimport FieldsEditorByTags from './FieldsEditorByTags';\r\nimport ByTagsComposer from './ByTagsComposer';\r\n\r\nexport default class FieldsEditorModal extends Modal {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.answers = this.attrs.discussion.masonAnswers();\r\n        this.dirty = false;\r\n        this.processing = false;\r\n        this.tagRelationship = this.attrs.discussion.data.relationships.tags.data[0];\r\n        this.byTagEnabled = app.data.resources[0].attributes['xsoft-mason-tag.by-tag'];\r\n\r\n        // Stays null if the feature is not used\r\n        this.tags = null;\r\n\r\n        let ByTagsUnit = new ByTagsComposer();\r\n        const matchingTags = ByTagsUnit.matchTags();\r\n        this.myFields = [];\r\n\r\n        // annoying way to get current Tag name, but it works\r\n        let thisIncludes = this.attrs.discussion.payload.included;\r\n        const findTag = thisIncludes.find((element) => element.type == 'tags');\r\n\r\n        for (let i = 0; i < matchingTags.length; i++) {\r\n            if (matchingTags[i].tagName == findTag.attributes.name) {\r\n                this.myFields = matchingTags[i].fields;\r\n            }\r\n        }\r\n    }\r\n\r\n    title() {\r\n        return app.translator.trans('xsoft-mason-tag.forum.answers-modal.edit-title', {\r\n            title: <em>{this.attrs.discussion.title()}</em>,\r\n        });\r\n    }\r\n\r\n    content() {\r\n        return (\r\n            <>\r\n                <div className=\"Modal-body\">\r\n                    {\r\n                        this.byTagEnabled ?\r\n                        <FieldsEditorByTags\r\n                            discussion={this.attrs.discussion} // Only for the tags feature\r\n                            answers={this.answers}\r\n                            bytags={this.myFields}\r\n                            tags={this.tags}\r\n                            onchange={this.answersChanged.bind(this)}\r\n                        />\r\n                        :\r\n                        <FieldsEditor\r\n                            discussion={this.attrs.discussion} // Only for the tags feature\r\n                            answers={this.answers}\r\n                            onchange={this.answersChanged.bind(this)}\r\n                            ontagchange={(tags) => {\r\n                                this.tags = tags;\r\n                                this.dirty = true;\r\n                            }}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className=\"Modal-footer\">\r\n                    <Button className=\"Button Button--primary\" loading={this.processing} disabled={!this.dirty} onclick={this.saveAnswers.bind(this)}>\r\n                        {app.translator.trans('xsoft-mason-tag.forum.answers-modal.save')}\r\n                    </Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    answersChanged(answers) {\r\n        this.answers = answers;\r\n        this.dirty = true;\r\n    }\r\n\r\n    saveAnswers() {\r\n        this.processing = true;\r\n\r\n        let tagRelationship = {\r\n            data: this.tagRelationship,\r\n        };\r\n        let relationships = {\r\n            tags: [tagRelationship],\r\n            masonAnswers: this.answers,\r\n        };\r\n\r\n        // If tag edit is enabled, take care of them here as well\r\n        // if (this.tags !== null) {\r\n        //     relationships.tags = this.tags;\r\n        // }\r\n\r\n        // Use a temporary discussion object\r\n        // Otherwise Flarum persists the relationships to the model while the request is still processing\r\n        // Which causes errors with components outside of the modal redrawing and reading non-persisted data\r\n        // The real discussion will be updated automatically by the store once the request completes which is all we need\r\n        const temporaryDiscussion = app.store.createRecord('discussions');\r\n        temporaryDiscussion.pushData({ id: this.attrs.discussion.id() });\r\n        temporaryDiscussion.exists = true;\r\n\r\n        temporaryDiscussion\r\n            .save({\r\n                relationships,\r\n            })\r\n            .then(() => {\r\n                this.processing = false;\r\n                app.modal.close();\r\n                m.redraw();\r\n            })\r\n            .catch((err) => {\r\n                this.processing = false;\r\n                throw err;\r\n            });\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionHero'];","import app from 'flarum/forum/app';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport FieldsEditorModal from './FieldsEditorModal';\r\nimport FieldGrid from './FieldGrid';\r\nimport sortByAttribute from '@common/helpers/sortByAttribute';\r\n\r\nexport default class FieldsViewer extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\r\n        this.discussion = this.attrs.discussion;\r\n    }\r\n\r\n    view() {\r\n        const head = this.headItems().toArray();\r\n        const fields = this.fieldsItems().toArray();\r\n\r\n        // If all fields are hidden\r\n        // And either no controls are shown or the setting hides them\r\n        // We don't show the viewer\r\n        if (!fields.length && (!head.length || app.forum.attribute('xsoft-mason-tag.hide-empty-fields-section'))) {\r\n            // We need to return an actual dom element or Flarum does not like it\r\n            return <div />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"Mason-Fields Mason-Fields--viewer\">\r\n                {head}\r\n                <FieldGrid items={fields} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    headItems() {\r\n        const items = new ItemList();\r\n\r\n        if (this.discussion.canUpdateMasonAnswers()) {\r\n            items.add(\r\n                'edit',\r\n                <Button\r\n                    className=\"Button Mason-Fields--edit\"\r\n                    icon=\"fas fa-pen\"\r\n                    onclick={() =>\r\n                        app.modal.show(FieldsEditorModal, {\r\n                            discussion: this.discussion,\r\n                        })\r\n                    }\r\n                >\r\n                    {app.translator.trans('xsoft-mason-tag.forum.discussion-controls.edit-answers')}\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\r\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    fieldsItems() {\r\n        const items = new ItemList();\r\n\r\n        this.fields.forEach((field) => {\r\n            // Discussion answers to this field\r\n            const answers = sortByAttribute(\r\n                (this.discussion.masonAnswers() || []).filter((answer) => {\r\n                    // It's necessary to compare the field() relationship\r\n                    // Because field.suggestedAnswers() won't contain new and user answers\r\n                    return answer.field() && answer.field().id() === field.id();\r\n                })\r\n            );\r\n\r\n            let answer_list = answers.map((answer) => <span className=\"Mason-Inline-Answer\">{answer.content()}</span>);\r\n\r\n            if (answers.length === 0) {\r\n                if (field.show_when_empty()) {\r\n                    answer_list.push(<em className=\"Mason-Inline-Answer\">{app.translator.trans('xsoft-mason-tag.forum.post-answers.no-answer')}</em>);\r\n                } else {\r\n                    // If the field has no answer and the setting is off we don't show it\r\n                    return;\r\n                }\r\n            }\r\n\r\n            items.add(\r\n                `field-${field.id()}`,\r\n                <div className=\"Mason-Field Form-group\">\r\n                    <label>\r\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\r\n                        {field.name()}\r\n                    </label>\r\n                    <div className=\"FormControl Mason-Inline-Answers\">{answer_list}</div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return items;\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionPage'];","import { extend } from 'flarum/common/extend';\r\nimport app from 'flarum/forum/app';\r\nimport CommentPost from 'flarum/common/components/CommentPost';\r\nimport DiscussionPage from 'flarum/common/components/DiscussionPage';\r\nimport FieldsViewer from './components/FieldsViewer';\r\n\r\nfunction showFieldsOnPost(post) {\r\n    // The CommentPost component is also visible on the user profile, but we don't want to render the fields there\r\n    if (!app.current.matches(DiscussionPage)) {\r\n        return false;\r\n    }\r\n\r\n    // We only add fields to the first post, and only if fields are not displayed in the hero\r\n    // TODO: what if the first post is deleted ?\r\n    return post.number() === 1 && !app.forum.attribute('xsoft-mason-tag.fields-in-hero');\r\n}\r\n\r\nexport default function () {\r\n    extend(CommentPost.prototype, 'oninit', function () {\r\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\r\n            return;\r\n        }\r\n\r\n        this.subtree.check(() => {\r\n            // Create a string with all answer ids\r\n            // If answers change this string will be different\r\n            return (this.attrs.post.discussion().masonAnswers() || [])\r\n                .map((answer) => {\r\n                    // Sometimes answer will be undefined while the data is being saved in FieldsEditorModal\r\n                    if (!answer) {\r\n                        return '';\r\n                    }\r\n\r\n                    // There is a time after discussion.save() is called but before the data included in response is parsed\r\n                    // where Flarum will already have updated the relationship, but answer.field will be missing and this causes\r\n                    // the field to be skipped in FieldsViewer. So we also need to check the load status of that relationship\r\n                    return JSON.stringify([answer.id(), !!answer.field()]);\r\n                })\r\n                .join(',');\r\n        });\r\n    });\r\n\r\n    extend(CommentPost.prototype, 'content', function (content) {\r\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\r\n            return;\r\n        }\r\n\r\n        const postHeaderIndex = content.findIndex((item) => item.attrs && item.attrs.className === 'Post-header');\r\n\r\n        // Insert the new content just after the header\r\n        // or at the very beginning if the header is not found\r\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, <FieldsViewer discussion={this.attrs.post.discussion()} />);\r\n    });\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Model from 'flarum/common/Model';\r\nimport Discussion from 'flarum/common/models/Discussion';\r\nimport Forum from 'flarum/common/models/Forum';\r\nimport Answer from '@common/models/Answer';\r\nimport Field from '@common/models/Field';\r\nimport ByTag from '@common/models/ByTag';\r\nimport addComposerFields from './addComposerFields';\r\nimport addFieldUpdateControl from './addFieldUpdateControl';\r\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\r\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\r\nimport patchModelIdentifier from './patchModelIdentifier';\r\n\r\napp.initializers.add('xsoft-ict-mason-tag', (app) => {\r\n    app.store.models['mason-fields'] = Field;\r\n    app.store.models['mason-answers'] = Answer;\r\n    app.store.models['mason-bytags'] = ByTag;\r\n\r\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\r\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\r\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\r\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\r\n\r\n    addComposerFields();\r\n    addFieldsOnDiscussionHero();\r\n    addFieldsOnDiscussionPost();\r\n    addFieldUpdateControl();\r\n    patchModelIdentifier();\r\n});\r\n","import { extend } from 'flarum/common/extend';\r\nimport app from 'flarum/forum/app';\r\nimport DiscussionComposer from 'flarum/common/components/DiscussionComposer';\r\nimport Composer from 'flarum/components/Composer';\r\nimport FieldsEditor from './components/FieldsEditor';\r\nimport FieldsEditorByTags from './components/FieldsEditorByTags';\r\nimport ByTagsComposer from './components/ByTagsComposer';\r\nimport TagDiscussionModal from 'flarum/tags/components/TagDiscussionModal';\r\n\r\nexport default function () {\r\n    DiscussionComposer.prototype.masonAnswers = [];\r\n    let byTagEnabled = app.data.resources[0].attributes['xsoft-mason-tag.by-tag'];\r\n    let ByTagsUnit = new ByTagsComposer();\r\n    let dTag = '';\r\n    var tagChanged = '';\r\n\r\n    extend(Composer.prototype, 'hide', function (e) {\r\n        // remove the the fields from the headerItems...\r\n        dTag = '';\r\n    });\r\n\r\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\r\n        if (!app.forum.canFillMasonFields()) {\r\n            return;\r\n        }\r\n\r\n        // so this list contains whether a tag has fields!\r\n        const matchingTags = ByTagsUnit.matchTags();\r\n        if (byTagEnabled) {\r\n            dTag = '';\r\n            this.myFields = [];\r\n\r\n            if (app.composer.fields.tags && app.composer.fields.tags.length > 0) {\r\n                for (let selectedTagIndex = 0; selectedTagIndex < app.composer.fields.tags.length; selectedTagIndex++) {\r\n                    let selectTagName = app.composer.fields.tags[selectedTagIndex].data.attributes.name;\r\n                    for (let i = 0; i < matchingTags.length; i++) {\r\n                        if (matchingTags[i].tagName == selectTagName) {\r\n                            this.myFields = matchingTags[i].fields;\r\n                            dTag = selectTagName;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (dTag != '') {\r\n                        // Found valid selected tag\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // this.myFields is a list of fields that match the selected tag only\r\n\r\n            if (tagChanged != dTag) {\r\n                // clear the decks after every tag change\r\n                this.composer.fields.masonAnswers = [];\r\n                tagChanged = dTag;\r\n            }\r\n\r\n            items.add(\r\n                'mason-fields',\r\n                <FieldsEditorByTags\r\n                    bytags={this.myFields}\r\n                    tags={this.composer.fields.tags}\r\n                    answers={this.composer.fields.masonAnswers || []}\r\n                    onchange={(answers) => {\r\n                        this.composer.fields.masonAnswers = answers;\r\n                    }}\r\n                />\r\n            );\r\n        } else {\r\n            items.add(\r\n                'mason-fields',\r\n                <FieldsEditor\r\n                    answers={this.composer.fields.masonAnswers || []}\r\n                    onchange={(answers) => {\r\n                        this.composer.fields.masonAnswers = answers;\r\n                    }}\r\n                    ontagchange={(tags) => {\r\n                        this.composer.fields.tags = tags;\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n    });\r\n\r\n    extend(DiscussionComposer.prototype, 'data', function (data) {\r\n        if (!app.forum.canFillMasonFields() || !this.composer.fields.masonAnswers) {\r\n            return;\r\n        }\r\n\r\n        data.relationships = data.relationships || {};\r\n        data.relationships.masonAnswers = this.composer.fields.masonAnswers;\r\n    });\r\n}\r\n","import { extend, override } from 'flarum/common/extend';\r\nimport app from 'flarum/forum/app';\r\nimport DiscussionHero from 'flarum/common/components/DiscussionHero';\r\nimport Composer from 'flarum/components/Composer';\r\nimport FieldsViewer from './components/FieldsViewer';\r\n\r\nexport default function () {\r\n    extend(DiscussionHero.prototype, 'items', function (items) {\r\n        if (!this.attrs.discussion.canSeeMasonAnswers() || !app.forum.attribute('xsoft-mason-tag.fields-in-hero')) {\r\n            return;\r\n        }\r\n\r\n        items.add('mason-fields', <FieldsViewer discussion={this.attrs.discussion} />);\r\n    });\r\n\r\n    override(Composer.prototype, 'animateToPosition', function (original, position) {\r\n        // we need to detect if there are any mason fields present and if there are\r\n        // add their height to the default height of the composer window\r\n        const $composer = this.$().stop(true);\r\n        const composerHeight = $composer.outerHeight();\r\n        m.redraw(true);\r\n        $composer.show();\r\n\r\n        //const $composer = this.$();\r\n        const headerHeight = this.$('.ComposerBody-header').outerHeight();\r\n\r\n        if (position === Composer.PositionEnum.NORMAL && composerHeight < headerHeight) {\r\n            this.height = headerHeight + composerHeight;\r\n            this.updateHeight();\r\n        }\r\n\r\n        return original(position);\r\n    });\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport { extend } from 'flarum/common/extend';\r\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\r\nimport Button from 'flarum/common/components/Button';\r\nimport FieldsEditorModal from './components/FieldsEditorModal';\r\n\r\nexport default function () {\r\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\r\n        if (discussion.canUpdateMasonAnswers()) {\r\n            items.add(\r\n                'mason-update-answers',\r\n                <Button icon=\"fas fa-tag\" onclick={() => app.modal.show(FieldsEditorModal, { discussion })}>\r\n                    {app.translator.trans('xsoft-mason-tag.forum.discussion-controls.edit-answers')}\r\n                </Button>\r\n            );\r\n        }\r\n    });\r\n}\r\n","import { override } from 'flarum/common/extend';\r\nimport Model from 'flarum/common/Model';\r\nimport Answer from '@common/models/Answer';\r\n\r\nexport default function () {\r\n    override(Model, 'getIdentifier', function (original, model) {\r\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\r\n        // That way they can be created server-side without making individual API requests for each answer\r\n        if (model instanceof Answer && !model.exists) {\r\n            return {\r\n                type: model.data.type,\r\n                attributes: {\r\n                    content: model.data.attributes.content,\r\n                },\r\n                relationships: {\r\n                    field: {\r\n                        data: Model.getIdentifier(model.data.relationships.field),\r\n                    },\r\n                },\r\n            };\r\n        }\r\n\r\n        // Default behaviour\r\n        return original(model);\r\n    });\r\n}\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","Answer","content","Model","is_suggested","sort","field","apiEndpoint","this","exists","data","id","Field","name","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","allAnswers","suggestedAnswers","required","computed","multiple","ByTag","tag_name","tag_id","field_name","sortByAttribute","items","attr","b","FieldEditDropdown","view","vnode","attrs","answers","onchange","selectedAnswerIdsForThisField","forEach","answer","findIndex","push","relationshipInfo","className","event","target","options","option","selected","answerId","storeObj","app","relationships","length","disabled","hidden","placeholderHidden","selectPlaceholder","map","indexOf","text","Component","FieldEditText","oninit","inputId","answersForThisField","filter","class","oninput","e","attributes","placeholder","fieldPlaceholder","DiscussionFields","tags","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","inputUuid","Math","random","toString","substring","currentSelectedChild","parent","fieldRequired","classList","for","fieldLabel","find","FieldGrid","arr","size","Array","ceil","fill","undefined","_","i","slice","row","item","FieldsEditor","fields","answerToFieldIndex","isArray","console","warn","headItems","toArray","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","concat","ItemList","add","ontagchange","input","inputAttrs","FieldsEditorByTags","bytags","ByTagsComposer","matchTags","tagsList","tempStorage","usedList","fieldIDs","tagName","tagsObj","match","FieldsEditorModal","masonAnswers","dirty","processing","tagRelationship","byTagEnabled","matchingTags","myFields","findTag","payload","included","element","type","title","answersChanged","loading","onclick","saveAnswers","temporaryDiscussion","pushData","save","then","m","redraw","err","Modal","FieldsViewer","head","fieldsItems","canUpdateMasonAnswers","answer_list","showFieldsOnPost","post","DiscussionPage","number","store","models","Discussion","Forum","DiscussionComposer","ByTagsUnit","dTag","tagChanged","extend","Composer","selectedTagIndex","selectTagName","composer","addComposerFields","DiscussionHero","canSeeMasonAnswers","override","original","position","$composer","$","stop","composerHeight","outerHeight","show","headerHeight","height","updateHeight","CommentPost","subtree","check","JSON","stringify","join","postHeaderIndex","splice","DiscussionControls","model"],"sourceRoot":""}